package com.example.nettystudy.netty.chapter2;

/**
 * packageName : com.example.nettystudy.netty.chapter2
 * fileName : SyncASync
 * author : taeil
 * date : 2023/08/24
 * description :
 * =======================================================
 * DATE          AUTHOR                      NOTE
 * -------------------------------------------------------
 * 2023/08/24        taeil                   최초생성
 */
public class SyncASync {
    // 동기와 비동기.
    // 동기 : 조회 및 서비스의 모든 처리가 완료된 이후에 처리 결과를 알 수 있는 방식을 동기식 호출이라고 한다.
    //      -> 특정 메서드나 서비스가 이와 같은 호출 방식을 지원하면 '동기식 호출을 지원한다' 라고 표현한다.
    // 동기식 호출은 쉬운 디버깅과, 직관적인 흐름 추적이 가능하다는 장점이 있다.

    // 비동기 : 동기와 정반대로 대기하지 않고 처리를 요청하고 처리의 결과를 기다리는 시간에 다른 작업을 수행할 수 있다.
    // 필요한 시기에 서비스로부터 발행된 티켓을 사용하여 요청한 인증 처리가 완료되었는지 확인할 수 있다.

    // 비동기 호출을 지원하는 디자인 패턴은 다양하다.
    //  퓨쳐 패턴, 옵저버 패턴, Node.js는 콜백 함수, 네티는 리액터 패턴을 사용한다.

    // 개발자는 비동기화 코드를 작성할 때 수행시간, 프로그램의 구조 등 다양한 고민을 하게 되는데,
    // 네티는 비동기 호출을 위한 API들을 프레임워크 레벨에서 제공하므로 개발자가 스레드 동기화 이슈 및 그에 따른 버그를 신경 쓰는 대신 구현할 기능에 집중할 수 있다.

    

}