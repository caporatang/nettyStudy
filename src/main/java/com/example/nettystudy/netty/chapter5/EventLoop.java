package com.example.nettystudy.netty.chapter5;

/**
 * packageName : com.example.nettystudy.netty.chapter5
 * fileName : EventLoop
 * author : taeil
 * date : 2023/09/06
 * description :
 * =======================================================
 * DATE          AUTHOR                      NOTE
 * -------------------------------------------------------
 * 2023/09/06        taeil                   최초생성
 */
public class EventLoop {
    // 이벤트 기반 애플리케이션이 이벤트를 처리하는 방법은 크게 두 가지다.
    // 1. 이벤트 리스너와 이벤트 처리 스레드에 기반한 방법
    // UI 처리 프레임워크가 사용하는 방법으로써 이벤트를 처리하는 로직을 가진 이벤트 메서드를 대상 객체의 이벤트 리스너에 등록하고 객체에 이벤트가 발생했을 때 이벤트 러치 스레드에서 등록된 메서드를 수행한다.
    // 이때 이벤트 메서드를 수행하는 스레드는 대부분 단일 스레드로 구현한다.

    // 2. 이벤트 큐에 이벤트를 등록하고 이벤트 루프가 이벤트 큐에 접근하여 처리하는 방법
    // 첫 번째 방법에 비해 프레임워크의 구현이 복잡하지만 프레임워크의 사용자 입장에서는 더 간단하게 사용이 가능하다.

    // 이벤트 루프가 다중 스레드일 때 이벤트 큐는 여러 개의 스레드에서 공유되며 가장 먼저 이벤트 큐에 접근한 스레드가 첫 번째 이벤트를 가져와서 이벤트를 수행
    // 이때 이벤트 큐에 입력된 이벤트를 처리하고자 이벤트 루프 스레드를 사용한다.

    // ------------- 이벤트 루프의 개념 -------------
    // 이벤트 루프란 이벤트를 실행하기 위한 무한루프 스레드를 지칭한다.
    // 객체에서 발생한 이벤트는 이벤트 큐에 입력되고 이벤트 루프는 이벤트 큐에 입력된 이벤트가 있을 때 해당 이벤트를 꺼내서 이벤트를 실행한다.

    // 이벤트 루프가 지원하는 스레드 종류에 따라서 단일 스레드 이벤트 루프와 다중 스레드 이벤트 루프로 나뉘고, 이벤트 루프가 처리한 이벤트의 결과를 돌려주는 방식에 따라서
    // '콜백 패턴', '퓨처 패턴' 으로 나뉜다
    // 네티는 이 두 가지 패턴을 모두 지원한다.
}